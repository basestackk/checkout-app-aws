service: combined-service

tenant: null
app: null
org: null


provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  timeout: 30
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: arn:aws:events:us-east-1:971422673053:event-bus/default
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: arn:aws:lambda:us-east-1:971422673053:function:* # Update with actual Lambda ARN
    - Effect: "Allow"
      Action:
        - "docdb:DescribeDBClusters"
        - "docdb:DescribeDBInstances"
        - "docdb:Connect"
      Resource: arn:aws:docdb:us-east-1:971422673053:dbcluster:orders-cluster
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/inventory
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/inventory-db-read
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/carts
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/cart-db-read
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/pricing
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/pricing-db-read
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/UsersTable

resources:
  Resources:
    # Authorizer Lambda
    AuthorizerLambdaFunction:
      Type: AWS::Lambda::Function
      Properties:
        Handler: lib/services/auth/authorizer/authorizer.handler
        Role: arn:aws:iam::${aws:accountId}:role/LambdaExecutionRole
        CodeUri: ./lib
        Runtime: nodejs14.x
        Timeout: 10
        MemorySize: 128
        Environment:
          Variables:
            REDIS_URL: redis://localhost:6379

    # DocumentDB cluster configuration
    OrderDbCluster:
      Type: AWS::DocDB::DBCluster
      Properties:
        DBClusterIdentifier: order-db-cluster
        MasterUsername: admin
        MasterUserPassword: yourPassword # Make sure to use Secrets Manager in production
        Engine: docdb
        BackupRetentionPeriod: 7
        PreferredBackupWindow: 03:00-04:00
        PreferredMaintenanceWindow: Sun:06:00-Sun:07:00

    OrderDbInstance:
      Type: AWS::DocDB::DBInstance
      Properties:
        DBInstanceIdentifier: order-db-instance
        DBClusterIdentifier: !Ref OrderDbCluster
        DBInstanceClass: db.r5.large
        Engine: docdb
        PubliclyAccessible: false

    AuthTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: UsersTable
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # Inventory Resources (DynamoDB)
    InventoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: inventory
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    InventoryReadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: inventory-db-read
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # Cart Resources (DynamoDB)
    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: carts
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    CartReadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: cart-db-read
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    # Pricing Resources (DynamoDB)
    PricingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pricing
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    PricingReadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pricing-db-read
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    RedisSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: "Allow Lambda functions to connect to Redis"
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '6379'
            ToPort: '6379'
            CidrIp: "0.0.0.0/0"  # Adjust this according to your security requirements

    RedisCluster:
      Type: AWS::ElastiCache::ReplicationGroup
      Properties:
        ReplicationGroupId: "auth-redis-cluster"
        CacheNodeType: cache.t3.micro
        Engine: redis
        NumCacheClusters: 1
        AutomaticFailoverEnabled: false
        SecurityGroupIds:
          - Ref: RedisSecurityGroup

functions:
  # Authorizer Lambda
  authorizer:
    handler: lib/services/auth/authorizer/authorizer.handler
    role: arn:aws:iam::${aws:accountId}:role/LambdaExecutionRole

  auth:
    handler: lib/services/auth/auth.handler
    environment:
      AUTH_DB_NAME: users
    events:
      - http:
          path: login
          method: post
          cors: 
            origin: '*'  # Allow all origins, or you can specify your allowed origins
            headers:
              - Content-Type
              - Authorization
            allowCredentials: false
      - http:
          path: register
          method: post
          cors: 
            origin: '*'  # Allow all origins, or you can specify your allowed origins
            headers:
              - Content-Type
            allowCredentials: false
      - http:
          path: logout
          method: post
          cors: true
      - http:
          path: refreshToken
          method: post
          cors: true

  

  # GraphQL Lambda
  graphql:
    handler: lib/services/gql/gqlHandler.handler
    events:
      - http:
          path: graphql
          method: post
          cors: true
          authorizer: "authorizer"

  # Other service functions (Pricing, Inventory, Cart, Order)
  PricingService:
    handler: lib/services/pricing/command/command.handler
    description: Pricing Service lambda function
    environment:
      PRICING_TABLE_NAME: pricing # DynamoDB table name

  PricingServiceQuery:
    handler: lib/services/pricing/query/query.handler
    description: Pricing Service Query lambda function
    environment:
      PRICING_READ_TABLE_NAME: pricing-db-read # DynamoDB table name
    events:
      - eventBridge:
          pattern:
            source:
              - 'PricingService'
            detail-type:
              - 'PricingEvent'

  InventoryService:
    handler: lib/services/inventory/command/command.handler
    description: Inventory Service lambda function
    environment:
      INVENTORY_TABLE_NAME: inventory # DynamoDB table name

  InventoryServiceQuery:
    handler: lib/services/inventory/query/query.handler
    description: Inventory Service Query lambda function
    environment:
      INVENTORY_TABLE_NAME: inventory-db-read # DynamoDB table name
    events:
      - eventBridge:
          pattern:
            source:
              - 'InventoryService'
            detail-type:
              - 'InventoryEvent'

  CartService:
    handler: lib/services/cart/command/command.handler
    description: Cart Service lambda function
    environment:
      CART_TABLE_NAME: carts # DynamoDB table name

  CartServiceQuery:
    handler: lib/services/cart/query/query.handler
    description: Cart Service Query lambda function
    environment:
      CART_TABLE_NAME: cart-db-read # DynamoDB table name
    events:
      - eventBridge:
          pattern:
            source:
              - 'CartService'
            detail-type:
              - 'CartEvent'

  OrderService:
    handler: lib/services/order/command/command.handler
    description: Create Order in DocumentDB
    environment:
      ORDER_DB_NAME: orders-db 

  OrderServiceQuery:
    handler: lib/services/order/query/query.handler
    description: Fetch Orders from DocumentDB
    environment:
      ORDER_DB_NAME: orders-db-read # The name of the database
    events:
      - eventBridge:
          pattern:
            source:
              - 'OrderService'
            detail-type:
              - 'OrderEvent'
  
   # EventBridge triggers for order, inventory, and cart events
  eventBridgeTrigger:
    handler: lib/services/cart/query/query.handler
    events:
      - eventBridge:
          pattern:
            source:
              - "CartService"
            detail-type:
              - "CartEvent"

  eventBridgeTriggerOrder:
    handler: lib/services/order/query/query.handler
    events:
      - eventBridge:
          pattern:
            source:
              - "OrderService"
            detail-type:
              - "OrderEvent"

plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-offline-aws-eventbridge

custom:
  webpack:
    includeModules: true
  serverless-offline:
    httpPort: 3001
  serverless-offline-aws-eventbridge:
    port: 4000  # Shared EventBridge port
  dynamodb:
    start:
      port: 8000
      inMemory: true  # Optional: Use in-memory database for quick testing
      migrate: true   # Automatically creates tables based on resources section
    seed:
      domain: true  #
  redis:
    host: "localhost"
    port: 6379

# Additional build configuration
build:
  source_directories:
    - . 
    - node_modules/**
    - lib/**
    - repositories
    - ipc

# Package configuration
package:
  exclude:
    - .gitignore
  include:
    - node_modules/**
    - lib/**
