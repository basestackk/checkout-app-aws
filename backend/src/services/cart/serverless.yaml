# "org" ensures this Service is used with the correct Serverless Framework Access Key.
service: cart-service

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: arn:aws:events:us-east-1:971422673053:event-bus/default
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: arn:aws:lambda:us-east-1:971422673053:function:* # Update with actual Lambda ARN
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/carts
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/cart-db-read

resources:
  Resources:
    CartTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: carts
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    CartReadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: cart-db-read
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  CartService:
    handler: lib/services/cart/command.handler
    description: Cart Service lambda function
    environment:
      CART_TABLE_NAME: carts # DynamoDB table name

  CartServiceQuery:
    handler: lib/services/cart/query.handler
    description: Cart Service Query lambda function
    environment:
      CART_TABLE_NAME: cart-db-read # DynamoDB table name
    events:
      - eventBridge:
          pattern:
            source:
              - 'CartService'
            detail-type:
              - 'CartEvent'

  eventBridgeTrigger:
    handler: lib/query.handler
    events:
      - eventBridge:
          pattern:
            source:
              - "CartService"
              
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-offline-aws-eventbridge

custom:
  webpack:
    includeModules: true
  serverless-offline:
    httpPort: 3000
  serverless-offline-aws-eventbridge:
    port: 4000  # Shared EventBridge port

# Additional build configuration
build:
  source_directories:
    - .
    - node_modules/**
    - lib/**
    - application
    - controllers
    - middlewares
    - models
    - repositories
    - ../../ipc

# Package configuration
package:
  exclude:
    - .gitignore
  include:
    - node_modules/**
    - lib/**
    - ../../ipc/node_modules/**
