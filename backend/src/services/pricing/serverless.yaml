# "org" ensures this Service is used with the correct Serverless Framework Access Key.
service: pricing-service

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  stage: dev
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "events:PutEvents"
      Resource: arn:aws:events:us-east-1:971422673053:event-bus/default
    - Effect: "Allow"
      Action:
        - "lambda:InvokeFunction"
      Resource: arn:aws:lambda:us-east-1:971422673053:function:* # Update with actual Lambda ARN
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/pricing
    - Effect: "Allow"
      Action:
        - "dynamodb:UpdateItem"
        - "dynamodb:Query"
        - "dynamodb:PutItem"
        - "dynamodb:GetItem"
        - "dynamodb:BatchGetItem"
      Resource: arn:aws:dynamodb:us-east-1:971422673053:table/pricing-db-read

resources:
  Resources:
    PricingTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pricing
        AttributeDefinitions:
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: sku
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
    PricingReadTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: pricing-db-read
        AttributeDefinitions:
          - AttributeName: cartId
            AttributeType: S
          - AttributeName: sku
            AttributeType: S
        KeySchema:
          - AttributeName: cartId
            KeyType: HASH
          - AttributeName: sku
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

functions:
  PricingService:
    handler: lib/services/pricing/command/command.handler
    description: Pricing Service lambda function
    environment:
      PRICING_TABLE_NAME: pricing # DynamoDB table name

  PricingServiceQuery:
    handler: lib/services/pricing/query/query.handler
    description: Pricing Service Query lambda function
    environment:
      PRICING_READ_TABLE_NAME: pricing-db-read # DynamoDB table name
    events:
      - eventBridge:
          pattern:
            source:
              - 'PricingService'
            detail-type:
              - 'PricingEvent'

  eventBridgeTrigger:
    handler: lib/pricing/query/query.handler
    events:
      - eventBridge:
          pattern:
            source:
              - "PricingService"
              
plugins:
  - serverless-offline
  - serverless-dynamodb-local
  - serverless-offline-aws-eventbridge

custom:
  webpack:
    includeModules: true
  serverless-offline:
    httpPort: 3000
  serverless-offline-aws-eventbridge:
    port: 4000  # Shared EventBridge port


